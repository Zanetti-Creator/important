public static function convertToUTF8(&$input)
{
    if (is_string($input)) {
        // Verifique se a string não está em UTF-8 antes de converter
        if (!mb_check_encoding($input, 'UTF-8')) {
            $input = utf8_encode(trim($input));
        }
        return $input;
    } elseif (is_array($input)) {
        foreach ($input as &$value) {
            self::convertToUTF8($value);
        }
        return $input;
    } elseif (is_object($input)) {
        $vars = get_object_vars($input);
        foreach ($vars as $var => $value) {
            if (is_string($value)) {
                // Verifique se a propriedade não está em UTF-8 antes de converter
                if (!mb_check_encoding($value, 'UTF-8')) {
                    $input->$var = utf8_encode(trim($value));
                }
            } elseif (is_array($value) || is_object($value)) {
                self::convertToUTF8($value);
            }
        }
        return $input;
    }
}


//SEM KEY

public function convertToUTF8($input)
    {
        if (is_string($input)) {
            // Verifique se a string não está em UTF-8 antes de converter
            if (!mb_check_encoding($input, 'UTF-8')) {
                $input = utf8_encode(trim($input));
            }
            return $input;
        } elseif (is_array($input)) {
            foreach ($input as &$value) {
                $value = $this->convertToUTF8($value);
            }
            return $input;
        } elseif (is_object($input)) {
            $vars = array_keys(get_object_vars($input));
            foreach ($vars as $var) {
                $input->$var = $this->convertToUTF8($input->$var);
            }
            return $input;
        }
    }

//COM KEY MAS FALTANDO CORREÇÃO DE CARACTER
    public function encodedObject(&$input)
    {
        if (is_string($input)) {
            $input = utf8_encode(trim($input));
        } elseif (is_array($input)) {
            foreach ($input as &$value) {
                self::encodedObject($value);
            }

            return $input;
            unset($value);
        } elseif (is_object($input)) {
            $vars = array_keys(get_object_vars($input));
            foreach ($vars as $var) {
                trim($var);
                self::encodedObject($input->$var);
            }

            return $input;
        }
